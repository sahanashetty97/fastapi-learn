name: Release and Package

on:
  push:
    tags:
      - 'v*'  # Trigger the workflow on tag pushes that start with 'v'

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine tag and commit information
        id: tag_info
        run: |
          echo "::set-output name=tag_name::$(echo ${GITHUB_REF#refs/tags/})"
          echo "::set-output name=commit_sha::$(git rev-parse ${GITHUB_REF}^{})"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_info.outputs.tag_name }}
          release_name: Release ${{ steps.tag_info.outputs.tag_name }}
          body: |
            This is the release associated with tag ${{ steps.tag_info.outputs.tag_name }}.
            Commit SHA: ${{ steps.tag_info.outputs.commit_sha }}
          draft: false
          prerelease: false

  upload_package:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Build and package your software
      - name: Build and Package
        run: |
          # Add commands to build and package your software
          echo "Building and packaging your software..."
          # Add additional build and packaging commands here if needed

      # Upload the package as a release asset
      - name: Upload Package as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .C:\Users\SSHIVAS1\Downloads\FastApi  # Specify the path to your package
          asset_name: my-package.zip  # Specify the name of your package
          asset_content_type: application/zip

      # Log in to the Container registry and push the package
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Release to packages
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
